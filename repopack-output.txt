This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-17T19:17:31.166Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
class_instructor.model.ts
class_registration.model.ts
class.model.ts
index.ts
note.model.ts
user.model.ts

================================================================
Repository Files
================================================================

================
File: class_instructor.model.ts
================
import { DataTypes, Model, Sequelize } from 'sequelize';

export class ClassInstructor extends Model {
  public instructor_id!: number;
  public class_id!: number;
  public assigned_at!: Date;
}

export const ClassInstructorModelInit = (sequelize: Sequelize) => {
  ClassInstructor.init(
    {
      instructor_id: { type: DataTypes.INTEGER, primaryKey: true },
      class_id: { type: DataTypes.INTEGER, primaryKey: true },
      assigned_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
    },
    { sequelize, tableName: 'class_instructors' }
  );

  return ClassInstructor;
};

================
File: class_registration.model.ts
================
import { DataTypes, Model, Optional, Sequelize } from 'sequelize';

interface ClassRegistrationAttributes {
  registration_id: number;
  user_id: number;
  class_id: number;
  registered_at: Date;
}

interface ClassRegistrationCreationAttributes extends Optional<ClassRegistrationAttributes, 'registration_id'> {}

export class ClassRegistration extends Model<ClassRegistrationAttributes, ClassRegistrationCreationAttributes> {
  public registration_id!: number;
  public user_id!: number;
  public class_id!: number;
  public registered_at!: Date;
}

export const ClassRegistrationModelInit = (sequelize: Sequelize) => {
  ClassRegistration.init(
    {
      registration_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
      user_id: { type: DataTypes.INTEGER, allowNull: false },
      class_id: { type: DataTypes.INTEGER, allowNull: false },
      registered_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
    },
    { sequelize, tableName: 'class_registrations' }
  );

  return ClassRegistration;
};

================
File: class.model.ts
================
import { DataTypes, Model, Optional, Sequelize } from 'sequelize';

interface ClassAttributes {
  class_id: number;
  name: string;
  skill_level: string;
  start_time: Date;
  end_time: Date;
  location: string;
}

interface ClassCreationAttributes extends Optional<ClassAttributes, 'class_id'> {}

export class Class extends Model<ClassAttributes, ClassCreationAttributes> implements ClassAttributes {
  public class_id!: number;
  public name!: string;
  public skill_level!: string;
  public start_time!: Date;
  public end_time!: Date;
  public location!: string;
}

export const ClassModelInit = (sequelize: Sequelize) => {
  Class.init(
    {
      class_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
      name: { type: DataTypes.STRING, allowNull: false },
      skill_level: { type: DataTypes.STRING },
      start_time: { type: DataTypes.DATE, allowNull: false },
      end_time: { type: DataTypes.DATE, allowNull: false },
      location: { type: DataTypes.STRING },
    },
    { sequelize, tableName: 'classes' }
  );

  return Class;
};

================
File: index.ts
================
import { UserModelInit, User } from './user.model';
import { ClassModelInit, Class } from './class.model';
import { ClassInstructorModelInit, ClassInstructor } from './class_instructor.model';
import { ClassRegistrationModelInit, ClassRegistration } from './class_registration.model';
import { NoteModelInit, Note } from './note.model';
import { Sequelize } from 'sequelize';

export const initModels = (sequelize: Sequelize) => {
  const User = UserModelInit(sequelize);
  const Class = ClassModelInit(sequelize);
  const ClassInstructor = ClassInstructorModelInit(sequelize);
  const ClassRegistration = ClassRegistrationModelInit(sequelize);
  const Note = NoteModelInit(sequelize);

  // Define relationships
  ClassInstructor.belongsTo(User, { foreignKey: 'instructor_id' });
  ClassInstructor.belongsTo(Class, { foreignKey: 'class_id' });

  ClassRegistration.belongsTo(User, { foreignKey: 'user_id' });
  ClassRegistration.belongsTo(Class, { foreignKey: 'class_id' });

  Note.belongsTo(User, { as: 'instructor', foreignKey: 'instructor_id' });
  Note.belongsTo(User, { as: 'golfer', foreignKey: 'golfer_id' });
  Note.belongsTo(Class, { foreignKey: 'class_id' });

  return { User, Class, ClassInstructor, ClassRegistration, Note };
};

// export { initModels };

================
File: note.model.ts
================
import { DataTypes, Model, Optional, Sequelize } from 'sequelize';

interface NoteAttributes {
  note_id: number;
  instructor_id: number;
  golfer_id: number;
  class_id: number;
  note_content: string;
  created_at: Date;
}

interface NoteCreationAttributes extends Optional<NoteAttributes, 'note_id'> {}

export class Note extends Model<NoteAttributes, NoteCreationAttributes> implements NoteAttributes {
  public note_id!: number;
  public instructor_id!: number;
  public golfer_id!: number;
  public class_id!: number;
  public note_content!: string;
  public created_at!: Date;
}

export const NoteModelInit = (sequelize: Sequelize) => {
  Note.init(
    {
      note_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
      instructor_id: { type: DataTypes.INTEGER, allowNull: false },
      golfer_id: { type: DataTypes.INTEGER, allowNull: false },
      class_id: { type: DataTypes.INTEGER, allowNull: false },
      note_content: { type: DataTypes.TEXT, allowNull: false },
      created_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
    },
    { sequelize, tableName: 'notes' }
  );

  return Note;
};

================
File: user.model.ts
================
import { DataTypes, Model, Optional, Sequelize } from 'sequelize';

// Define User attributes and creation attributes
interface UserAttributes {
  user_id: number;
  username: string;
  password_hash: string;
  email: string;
  phone_number: string;
  emergency_contact_name?: string;
  emergency_contact_phone?: string;
  availability?: string;
  skill_level?: string;
  user_type: string;
  profile_created_at: Date;
}

interface UserCreationAttributes extends Optional<UserAttributes, 'user_id'> {}

export class User extends Model<UserAttributes, UserCreationAttributes> implements UserAttributes {
  public user_id!: number;
  public username!: string;
  public password_hash!: string;
  public email!: string;
  public phone_number!: string;
  public emergency_contact_name?: string;
  public emergency_contact_phone?: string;
  public availability?: string;
  public skill_level?: string;
  public user_type!: string;
  public profile_created_at!: Date;
}

export const UserModelInit = (sequelize: Sequelize) => {
  User.init(
    {
      user_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
      username: { type: DataTypes.STRING, allowNull: false },
      password_hash: { type: DataTypes.STRING, allowNull: false },
      email: { type: DataTypes.STRING, allowNull: false, unique: true },
      phone_number: { type: DataTypes.STRING },
      emergency_contact_name: { type: DataTypes.STRING },
      emergency_contact_phone: { type: DataTypes.STRING },
      availability: { type: DataTypes.TEXT },
      skill_level: { type: DataTypes.STRING },
      user_type: { type: DataTypes.STRING, allowNull: false },
      profile_created_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
    },
    { sequelize, tableName: 'users' }
  );

  return User;
};
